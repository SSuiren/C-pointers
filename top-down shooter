

#include <iostream>

using namespace std;

using namespace sf;

#include <SFML/Graphics.hpp>

#include <SFML/Audio.hpp>

#include <cstdint>

bool gameover;

const int width = 50;
const int& length = width;


void setup()
{

    gameover = false;

}

void draw()
{

}

void input()
{

}

void logic()
{

}

//function for everything to do with the health
class hp
{
public:
    //sets limits for player hp
    bool setmax_hp(int new_max_hp)
    {
        //stops hp from falling below zero
        if (new_max_hp < 1)
        {
            return false;

            max_hp = new_max_hp;
        }
        //stops hp from rising above the max
        if (current_hp > max_hp)
        {

            current_hp = max_hp;


        }

            return true;
    }

    // calls the max amount of health
    int getmaxHp()
    {
        return max_hp;
    }

    int currentHp(int Cur_hp)
    {
        return current_hp;
    }

    //function for taking damage
    void takedamage(int Tdamage)
    {
        //stops damage from going negative
        if (Tdamage > current_hp)
        {
            current_hp = 0;
            return;
        }
        // takes damage
        else
        {
            current_hp -= Tdamage;
        }

    }

    //function for healing
    void heal(int heal)
    {
        //stops over healing
        if (heal + current_hp > max_hp)
        {
            current_hp = max_hp;
        }
        // allows the full amount of healing
        else
        {
            heal += current_hp;
        }
    }

    hp() { current_hp = 1; max_hp = 1; }

        hp(int cHP, int mHP)
        {
            current_hp = cHP;
            max_hp = mHP;
            if (current_hp > max_hp)
            {
                current_hp = max_hp;
            }

        }


    
private:

    int current_hp;
    int max_hp;

};


    //shoots fast, 30 ammo count, weak bullets, 7 health
class gunman : public hp
{
public:
    static const int hpgrowth = 7u;
    gunman() : hp(hpgrowth, hpgrowth), damage({};
    
    

private:

};

    //powerful shots, but slower, 4 ammo count. 5 health
    void wizard()
    {


    }

    //longer range, and peircing, 1 ammo count, 4 heath
    void archer()
    {


    }
    
class bullets
{
public:

    CircleShape bullet;
    Vector2f currVelocity;
    float maxspeed;

    bullets(float radius = 5.f)
        : currVelocity(0.f, 0.f), maxspeed(10.f)
    {
        this->bullet.setRadius(radius);
        this->bullet.setFillColor(Color::Red);
    }

};


int main()
{

    RenderWindow window(VideoMode(800, 600), "360 shooter!", Style::Default);
    window.setFramerateLimit(60);
    //the players shape
    CircleShape player(25.f);
    //sets player color
    player.setFillColor(Color::White);

    //variables
    Vector2f playercenter;
    Vector2f mouseposwindow;
    Vector2f aimdir;
    Vector2f aimdirNorm;

    while (window.isOpen())
    {
        Event event;
        while (window.pollEvent(event))
        {
            if (event.type == Event::Closed)
                window.close();
        }
        //update
        //gives position for player character
        playercenter = Vector2f(player.getPosition().x + player.getRadius(), player.getPosition().y + player.getRadius());
        //gives position of the mouse
        mouseposwindow = Vector2f(Mouse::getPosition(window));
        //gives mouse position and player for bullet to spawn
        aimdir = mouseposwindow - playercenter;
        //allows for the bullet travel the path it was shot
        aimdirNorm = aimdir / float(sqrt(pow(aimdir.x, 2) + pow(aimdir.y, 2)));

        cout << aimdirNorm.x << " " << aimdirNorm.y << "\n";



        //draw
        window.clear();

        window.draw(player);

        window.display();
    }

    return 0;
}
